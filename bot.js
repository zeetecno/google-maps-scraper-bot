const { Telegraf } = require('telegraf');
const { addScrapingJob, startWorker } = require('./queue');
const scraper = require('./scraper');
const { isAllowed } = require('./utils/rateLimiter');

const ADMINS = [123456789]; // ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
const userLang = new Map();

const bot = new Telegraf(process.env.BOT_TOKEN);

// === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
bot.command('admin', (ctx) => {
  if (ADMINS.includes(ctx.from.id)) {
    ctx.reply('üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n/status ‚Äî –æ—á–µ—Ä–µ–¥—å\n/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞');
  }
});

bot.command('status', async (ctx) => {
  const { scrapingQueue } = require('./queue');
  const [waiting, active, completed] = await Promise.all([
    scrapingQueue.getWaitingCount(),
    scrapingQueue.getActiveCount(),
    scrapingQueue.getCompletedCount()
  ]);
  ctx.reply(`üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:\n–û–∂–∏–¥–∞—é—Ç: ${waiting}\n–í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${active}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completed}`);
});

// === –°—Ç–∞—Ä—Ç –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ ===
bot.start((ctx) => {
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_ 'lang_ru' }],
        [{ text: 'üá™üá∏ Espa√±ol', callback_ 'lang_es' }]
      ]
    }
  });
});

bot.action(/^lang_(ru|es)$/, async (ctx) => {
  const lang = ctx.match[1];
  userLang.set(ctx.from.id, lang);
  await ctx.answerCbQuery();
  await ctx.editMessageText(`–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${lang === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'Espa√±ol'}`);
  await ctx.reply('üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
    reply_markup: {
      keyboard: [[{ text: 'üîç –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' }], [{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å' }]],
      resize_keyboard: true
    }
  });
});

// === –ö–Ω–æ–ø–∫–∏ ===
bot.hears('üîç –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', async (ctx) => {
  const lang = userLang.get(ctx.from.id) || 'ru';
  const t = require('./locales')[lang];
  if (!isAllowed(ctx.from.id)) {
  const t = require('./locales')[lang];
  ctx.reply('üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>dentist in Berlin</code>', { parse_mode: 'HTML' });
});
  const text = ctx.message.text.trim();
  const lang = userLang.get(ctx.from.id) || 'ru';
  const t = require('./locales')[lang];

  if (text.startsWith('/')) return;

  if (!isAllowed(ctx.from.id)) {
    return ctx.reply(t.rate_limited);
  }

  await ctx.reply(t.status_queue);
  await addScrapingJob(ctx.from.id, text, lang);
  await ctx.reply(t.added_to_queue.replace('{query}', `<code>${text}</code>`), { parse_mode: 'HTML' });
});

// === –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ ===
startWorker(bot, scraper);

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
bot.launch().then(() => {
  console.log('üöÄ Google Maps Scraper Bot –∑–∞–ø—É—â–µ–Ω!');
});

process.on('SIGINT', () => bot.stop('SIGINT'));
process.on('SIGTERM', () => bot.stop('SIGTERM'));
// === –ü—Ä–∏—ë–º –∑–∞–ø—Ä–æ—Å–∞ ===
bot.on('text', async (ctx) => {

bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', (ctx) => {
  const lang = userLang.get(ctx.from.id) || 'ru';
  }
  await ctx.reply(t.enter_query, { parse_mode: 'HTML' });
});

