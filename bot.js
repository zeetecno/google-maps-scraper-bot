const { Telegraf } = require('telegraf');
const { addScrapingJob, startWorker } = require('./queue');
const scraper = require('./scraper');
const { isAllowed } = require('./utils/rateLimiter');
const locales = require('./locales'); // ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
const express = require('express');

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const ADMINS = [123456789]; // ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
const userLang = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
const bot = new Telegraf(process.env.BOT_TOKEN);

// === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
bot.command('admin', (ctx) => {
  if (ADMINS.includes(ctx.from.id)) {
    ctx.reply('üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n/status ‚Äî –æ—á–µ—Ä–µ–¥—å\n(—Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî –≤ –±—É–¥—É—â–µ–º)');
  }
});

bot.command('status', async (ctx) => {
  const { scrapingQueue } = require('./queue');
  const [waiting, active, completed] = await Promise.all([
    scrapingQueue.getWaitingCount(),
    scrapingQueue.getActiveCount(),
    scrapingQueue.getCompletedCount()
  ]);
  ctx.reply(`üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:\n–û–∂–∏–¥–∞—é—Ç: ${waiting}\n–í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${active}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completed}`);
});

// === –°—Ç–∞—Ä—Ç: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ ===
bot.start((ctx) => {
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
        [{ text: 'üá™üá∏ Espa√±ol', callback_data: 'lang_es' }]
      ]
    }
  });
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ===
bot.action(/^lang_(ru|es)$/, async (ctx) => {
  const lang = ctx.match[1];
  userLang.set(ctx.from.id, lang);
  await ctx.answerCbQuery();
  await ctx.editMessageText(`‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${lang === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'Espa√±ol'}`);
  await ctx.reply('üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
    reply_markup: {
      keyboard: [
        [{ text: 'üîç –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' }],
        [{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å' }]
      ],
      resize_keyboard: true
    }
  });
});

// === –ö–Ω–æ–ø–∫–∞: "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" ===
bot.hears('üîç –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', async (ctx) => {
  const lang = userLang.get(ctx.from.id) || 'ru';
  console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å ./queue.js');
  console.log(require.resolve('./queue.js')); // –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë—Ç
  const t = require('./locales')[lang];
  if (!isAllowed(ctx.from.id)) {
    return ctx.reply(t.rate_limited);
  }
  await ctx.reply(t.enter_query, { parse_mode: 'HTML' });
});

// === –ö–Ω–æ–ø–∫–∞: "–ü–æ–º–æ—â—å" ===
bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', (ctx) => {
  const lang = userLang.get(ctx.from.id) || 'ru';
  const t = require('./locales')[lang];
  ctx.reply(
    'üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>dentist in Berlin</code>',
    { parse_mode: 'HTML' }
  );
});

// === –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  const userId = ctx.from.id;
  const lang = userLang.get(userId) || 'ru';
  const t = require(`./locales/${lang === 'es' ? 'es' : 'ru'}.json`);

  // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)
  if (text.startsWith('/')) return;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
  if (!isAllowed(userId)) {
    return ctx.reply(t.rate_limited);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  await ctx.reply(t.status_queue);

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
  try {
    await addScrapingJob(userId, text, lang);
    await ctx.reply(t.added_to_queue.replace('{query}', `<code>${text}</code>`), { parse_mode: 'HTML' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å:', err);
    await ctx.reply(t.error.replace('{error}', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'));
  }
});

// === –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ ===
startWorker(bot, scraper);

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ 
//bot.launch()
 // .then(() => {
//    console.log('üöÄ Google Maps Scraper Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
//  })
//  .catch(err => {
//    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
//  }); 

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
//process.on('SIGINT', () => bot.stop('SIGINT'));
//process.on('SIGTERM', () => bot.stop('SIGTERM'));

// === –ü—Ä–æ—Å—Ç–æ–π Express-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
const app = express();
const PORT = process.env.PORT || 10000;

app.get('/', (req, res) => {
  res.send('ü§ñ Telegram Bot is running!');
});

app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
  console.log(`‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ long polling');
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.on('SIGINT', () => {
  bot.stop('SIGINT');
  process.exit(0);
});