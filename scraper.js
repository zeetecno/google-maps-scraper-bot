// scraper.js
const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');
const { saveToGoogleSheets } = require('./config/google-sheets');
const { exportToCSV } = require('./utils/csvExporter');

// –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
const locales = {
  ru: require('./locales/ru.json'),
  es: require('./locales/es.json')
};

module.exports = async function scrape(job, bot) {
  const { chatId, query, lang = 'ru' } = job.data;
  const t = locales[lang] || locales.ru;

  let browser;
  const allData = [];
  const processedWebsites = new Set();

  try {
    await bot.telegram.sendMessage(chatId, t.status_processing);

    browser = await chromium.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu']
    });

    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
      locale: 'es-ES',
    });

    const page = await context.newPage();
    
    // ==================================================================
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê URL
    // ==================================================================
    const searchUrl = `https://www.google.com/maps/search/${encodeURIComponent(query)}`;
    console.log(`üîç –ü–æ–∏—Å–∫: ${searchUrl}`);
    await page.goto(searchUrl, { waitUntil: 'domcontentloaded', timeout: 60000 });

    try {
      const acceptButton = page.getByRole('button', { name: /Aceptar todo|Accept all|–ü—Ä–∏–Ω—è—Ç—å –≤—Å–µ/i });
      await acceptButton.waitFor({ state: 'visible', timeout: 7000 });
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞–∂–∞—Ç–∞.');
      await acceptButton.click();
      await page.waitForTimeout(3000);
    } catch (error) {
      console.log('‚úÖ –û–∫–Ω–æ —Å–æ–≥–ª–∞—Å–∏—è —Å cookie –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å.');
    }
    
    let placeUrls = [];
    const feedLocator = page.locator('div[role="feed"]');
      
    try {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏...');
        await feedLocator.waitFor({ state: 'visible', timeout: 25000 });
        
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
        await feedLocator.locator('a[href*="/maps/place/"]').first().waitFor({ timeout: 20000 });
        
        console.log('‚úÖ –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞—á–∏–Ω–∞—é "—É–º–Ω—É—é" –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞...');

        await page.evaluate(async () => {
            const feedElement = document.querySelector('div[role="feed"]');
            if (!feedElement) return;
            let lastHeight = 0;
            let attempts = 0;
            const maxAttempts = 5;
            while (attempts < maxAttempts) {
                const currentHeight = feedElement.scrollHeight;
                feedElement.scrollTop = currentHeight;
                await new Promise(resolve => setTimeout(resolve, 2500));
                const newHeight = feedElement.scrollHeight;
                if (newHeight === lastHeight) {
                    attempts++;
                } else {
                    attempts = 0;
                }
                lastHeight = newHeight;
            }
        });
        
        console.log('‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–±–∏—Ä–∞—é –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏...');
        
        const links = await feedLocator.locator('a[href*="/maps/place/"]').all();
        const uniqueUrls = new Set();
        for (const link of links) {
            const href = await link.getAttribute('href');
            if (href) {
                uniqueUrls.add(href.startsWith('http') ? href : `https://www.google.com${href}`);
            }
        }
        placeUrls = [...uniqueUrls];

    } catch (err) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.', err.message);
        fs.writeFileSync(`page_dump_error_${Date.now()}.html`, await page.content());
    }

    if (placeUrls.length === 0) {
      await bot.telegram.sendMessage(chatId, t.no_results);
      await browser.close();
      return;
    }
    
    placeUrls = placeUrls.slice(0, 200);

    await bot.telegram.sendMessage(chatId, `üîç –ù–∞–π–¥–µ–Ω–æ ${placeUrls.length} –∫–∞—Ä—Ç–æ—á–µ–∫. –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤...`);

    for (const placeUrl of placeUrls) {
      const tab = await context.newPage();
      try {
        await tab.goto(placeUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        
        const companyInfo = await tab.evaluate(() => {
            const websiteButton = document.querySelector('a[data-item-id="authority"]');
            const phoneButton = document.querySelector('button[data-item-id*="phone"]');
            const website = websiteButton ? websiteButton.href : null;
            const phoneRaw = phoneButton ? phoneButton.getAttribute('aria-label') : null;
            const phone = phoneRaw ? phoneRaw.replace(/[^0-9+]/g, '') : null; // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            return { website, phone };
        });

        const { website, phone } = companyInfo;

        if (!website || processedWebsites.has(website)) {
          continue;
        }
        processedWebsites.add(website);

        console.log(`üåê –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å–∞–π—Ç: ${website} | üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        await tab.goto(website, { waitUntil: 'networkidle', timeout: 45000 });
        const content = await tab.content();

        const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
        const matches = [...new Set(content.match(emailRegex) || [])];

        const foundEmails = matches
          .map(email => email.toLowerCase().trim())
          .filter(email => !email.endsWith('.png') && !email.endsWith('.jpg') && !email.endsWith('.gif') && !email.endsWith('.svg'))
          .filter(email => !/^(abuse|noreply|no-reply|contact|info|support|admin|hello|mail|help|sales|billing)@/i.test(email));
        
        if (foundEmails.length > 0) {
            for (const email of foundEmails) {
                allData.push({ email, website, phone: phone || '' });
            }
        } else {
            allData.push({ email: '', website, phone: phone || '' });
        }
        
        await new Promise(r => setTimeout(r, 1000));

      } catch (err) {
        console.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${placeUrl}:`, err.message);
      } finally {
        if (!tab.isClosed()) await tab.close();
      }
    }

    await browser.close();

    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)

  } catch (err) {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ scrape:', err);
    await bot.telegram.sendMessage(chatId, t.error.replace('{error}', err.message));
  } finally {
    if (browser?.isConnected()) {
        await browser.close();
    }
  }
};